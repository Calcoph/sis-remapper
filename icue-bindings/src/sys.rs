#![allow(non_upper_case_globals)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen 0.69.4 */

pub(crate) const CORSAIR_STRING_SIZE_S: ::std::os::raw::c_uint = 64;
pub(crate) const CORSAIR_STRING_SIZE_M: ::std::os::raw::c_uint = 128;
pub(crate) const CORSAIR_LAYER_PRIORITY_MAX: ::std::os::raw::c_uint = 255;
pub(crate) const CORSAIR_DEVICE_COUNT_MAX: ::std::os::raw::c_uint = 64;
pub(crate) const CORSAIR_DEVICE_LEDCOUNT_MAX: ::std::os::raw::c_uint = 512;
pub type CorsairDeviceId = [::std::os::raw::c_char; 128usize];
pub type CorsairLedLuid = ::std::os::raw::c_uint;
pub(crate) const CorsairError_CE_Success: CorsairError = 0;
pub(crate) const CorsairError_CE_NotConnected: CorsairError = 1;
pub(crate) const CorsairError_CE_NoControl: CorsairError = 2;
pub(crate) const CorsairError_CE_IncompatibleProtocol: CorsairError = 3;
pub(crate) const CorsairError_CE_InvalidArguments: CorsairError = 4;
pub(crate) const CorsairError_CE_InvalidOperation: CorsairError = 5;
pub(crate) const CorsairError_CE_DeviceNotFound: CorsairError = 6;
pub(crate) const CorsairError_CE_NotAllowed: CorsairError = 7;
pub type CorsairError = ::std::os::raw::c_uint;
pub const CorsairSessionState_CSS_Invalid: CorsairSessionState = 0;
pub const CorsairSessionState_CSS_Closed: CorsairSessionState = 1;
pub const CorsairSessionState_CSS_Connecting: CorsairSessionState = 2;
pub const CorsairSessionState_CSS_Timeout: CorsairSessionState = 3;
pub const CorsairSessionState_CSS_ConnectionRefused: CorsairSessionState = 4;
pub const CorsairSessionState_CSS_ConnectionLost: CorsairSessionState = 5;
pub const CorsairSessionState_CSS_Connected: CorsairSessionState = 6;
pub type CorsairSessionState = ::std::os::raw::c_uint;
pub const CorsairDeviceType_CDT_Unknown: CorsairDeviceType = 0;
pub const CorsairDeviceType_CDT_Keyboard: CorsairDeviceType = 1;
pub const CorsairDeviceType_CDT_Mouse: CorsairDeviceType = 2;
pub const CorsairDeviceType_CDT_Mousemat: CorsairDeviceType = 4;
pub const CorsairDeviceType_CDT_Headset: CorsairDeviceType = 8;
pub const CorsairDeviceType_CDT_HeadsetStand: CorsairDeviceType = 16;
pub const CorsairDeviceType_CDT_FanLedController: CorsairDeviceType = 32;
pub const CorsairDeviceType_CDT_LedController: CorsairDeviceType = 64;
pub const CorsairDeviceType_CDT_MemoryModule: CorsairDeviceType = 128;
pub const CorsairDeviceType_CDT_Cooler: CorsairDeviceType = 256;
pub const CorsairDeviceType_CDT_Motherboard: CorsairDeviceType = 512;
pub const CorsairDeviceType_CDT_GraphicsCard: CorsairDeviceType = 1024;
pub const CorsairDeviceType_CDT_Touchbar: CorsairDeviceType = 2048;
pub const CorsairDeviceType_CDT_GameController: CorsairDeviceType = 4096;
pub const CorsairDeviceType_CDT_All: CorsairDeviceType = 4294967295;
pub(crate) type CorsairDeviceType = ::std::os::raw::c_uint;
pub const CorsairEventId_CEI_Invalid: CorsairEventId = 0;
pub const CorsairEventId_CEI_DeviceConnectionStatusChangedEvent: CorsairEventId = 1;
pub const CorsairEventId_CEI_KeyEvent: CorsairEventId = 2;
pub type CorsairEventId = ::std::os::raw::c_uint;
pub const CorsairMacroKeyId_CMKI_Invalid: CorsairMacroKeyId = 0;
pub const CorsairMacroKeyId_CMKI_1: CorsairMacroKeyId = 1;
pub const CorsairMacroKeyId_CMKI_2: CorsairMacroKeyId = 2;
pub const CorsairMacroKeyId_CMKI_3: CorsairMacroKeyId = 3;
pub const CorsairMacroKeyId_CMKI_4: CorsairMacroKeyId = 4;
pub const CorsairMacroKeyId_CMKI_5: CorsairMacroKeyId = 5;
pub const CorsairMacroKeyId_CMKI_6: CorsairMacroKeyId = 6;
pub const CorsairMacroKeyId_CMKI_7: CorsairMacroKeyId = 7;
pub const CorsairMacroKeyId_CMKI_8: CorsairMacroKeyId = 8;
pub const CorsairMacroKeyId_CMKI_9: CorsairMacroKeyId = 9;
pub const CorsairMacroKeyId_CMKI_10: CorsairMacroKeyId = 10;
pub const CorsairMacroKeyId_CMKI_11: CorsairMacroKeyId = 11;
pub const CorsairMacroKeyId_CMKI_12: CorsairMacroKeyId = 12;
pub const CorsairMacroKeyId_CMKI_13: CorsairMacroKeyId = 13;
pub const CorsairMacroKeyId_CMKI_14: CorsairMacroKeyId = 14;
pub const CorsairMacroKeyId_CMKI_15: CorsairMacroKeyId = 15;
pub const CorsairMacroKeyId_CMKI_16: CorsairMacroKeyId = 16;
pub const CorsairMacroKeyId_CMKI_17: CorsairMacroKeyId = 17;
pub const CorsairMacroKeyId_CMKI_18: CorsairMacroKeyId = 18;
pub const CorsairMacroKeyId_CMKI_19: CorsairMacroKeyId = 19;
pub const CorsairMacroKeyId_CMKI_20: CorsairMacroKeyId = 20;
pub type CorsairMacroKeyId = ::std::os::raw::c_uint;
pub const CorsairDevicePropertyId_CDPI_Invalid: CorsairDevicePropertyId = 0;
pub const CorsairDevicePropertyId_CDPI_PropertyArray: CorsairDevicePropertyId = 1;
pub const CorsairDevicePropertyId_CDPI_MicEnabled: CorsairDevicePropertyId = 2;
pub const CorsairDevicePropertyId_CDPI_SurroundSoundEnabled: CorsairDevicePropertyId = 3;
pub const CorsairDevicePropertyId_CDPI_SidetoneEnabled: CorsairDevicePropertyId = 4;
pub const CorsairDevicePropertyId_CDPI_EqualizerPreset: CorsairDevicePropertyId = 5;
pub const CorsairDevicePropertyId_CDPI_PhysicalLayout: CorsairDevicePropertyId = 6;
pub const CorsairDevicePropertyId_CDPI_LogicalLayout: CorsairDevicePropertyId = 7;
pub const CorsairDevicePropertyId_CDPI_MacroKeyArray: CorsairDevicePropertyId = 8;
pub const CorsairDevicePropertyId_CDPI_BatteryLevel: CorsairDevicePropertyId = 9;
pub const CorsairDevicePropertyId_CDPI_ChannelLedCount: CorsairDevicePropertyId = 10;
pub const CorsairDevicePropertyId_CDPI_ChannelDeviceCount: CorsairDevicePropertyId = 11;
pub const CorsairDevicePropertyId_CDPI_ChannelDeviceLedCountArray: CorsairDevicePropertyId = 12;
pub const CorsairDevicePropertyId_CDPI_ChannelDeviceTypeArray: CorsairDevicePropertyId = 13;
pub type CorsairDevicePropertyId = ::std::os::raw::c_uint;
pub const CorsairDataType_CT_Boolean: CorsairDataType = 0;
pub const CorsairDataType_CT_Int32: CorsairDataType = 1;
pub const CorsairDataType_CT_Float64: CorsairDataType = 2;
pub const CorsairDataType_CT_String: CorsairDataType = 3;
pub const CorsairDataType_CT_Boolean_Array: CorsairDataType = 16;
pub const CorsairDataType_CT_Int32_Array: CorsairDataType = 17;
pub const CorsairDataType_CT_Float64_Array: CorsairDataType = 18;
pub const CorsairDataType_CT_String_Array: CorsairDataType = 19;
pub type CorsairDataType = ::std::os::raw::c_uint;
pub const CorsairPropertyFlag_CPF_None: CorsairPropertyFlag = 0;
pub const CorsairPropertyFlag_CPF_CanRead: CorsairPropertyFlag = 1;
pub const CorsairPropertyFlag_CPF_CanWrite: CorsairPropertyFlag = 2;
pub const CorsairPropertyFlag_CPF_Indexed: CorsairPropertyFlag = 4;
pub type CorsairPropertyFlag = ::std::os::raw::c_uint;
pub const CorsairPhysicalLayout_CPL_Invalid: CorsairPhysicalLayout = 0;
pub const CorsairPhysicalLayout_CPL_US: CorsairPhysicalLayout = 1;
pub const CorsairPhysicalLayout_CPL_UK: CorsairPhysicalLayout = 2;
pub const CorsairPhysicalLayout_CPL_JP: CorsairPhysicalLayout = 3;
pub const CorsairPhysicalLayout_CPL_KR: CorsairPhysicalLayout = 4;
pub const CorsairPhysicalLayout_CPL_BR: CorsairPhysicalLayout = 5;
pub type CorsairPhysicalLayout = ::std::os::raw::c_uint;
pub const CorsairLogicalLayout_CLL_Invalid: CorsairLogicalLayout = 0;
pub const CorsairLogicalLayout_CLL_US_Int: CorsairLogicalLayout = 1;
pub const CorsairLogicalLayout_CLL_NA: CorsairLogicalLayout = 2;
pub const CorsairLogicalLayout_CLL_EU: CorsairLogicalLayout = 3;
pub const CorsairLogicalLayout_CLL_UK: CorsairLogicalLayout = 4;
pub const CorsairLogicalLayout_CLL_BE: CorsairLogicalLayout = 5;
pub const CorsairLogicalLayout_CLL_BR: CorsairLogicalLayout = 6;
pub const CorsairLogicalLayout_CLL_CH: CorsairLogicalLayout = 7;
pub const CorsairLogicalLayout_CLL_CN: CorsairLogicalLayout = 8;
pub const CorsairLogicalLayout_CLL_DE: CorsairLogicalLayout = 9;
pub const CorsairLogicalLayout_CLL_ES: CorsairLogicalLayout = 10;
pub const CorsairLogicalLayout_CLL_FR: CorsairLogicalLayout = 11;
pub const CorsairLogicalLayout_CLL_IT: CorsairLogicalLayout = 12;
pub const CorsairLogicalLayout_CLL_ND: CorsairLogicalLayout = 13;
pub const CorsairLogicalLayout_CLL_RU: CorsairLogicalLayout = 14;
pub const CorsairLogicalLayout_CLL_JP: CorsairLogicalLayout = 15;
pub const CorsairLogicalLayout_CLL_KR: CorsairLogicalLayout = 16;
pub const CorsairLogicalLayout_CLL_TW: CorsairLogicalLayout = 17;
pub const CorsairLogicalLayout_CLL_MEX: CorsairLogicalLayout = 18;
pub type CorsairLogicalLayout = ::std::os::raw::c_uint;
pub const CorsairChannelDeviceType_CCDT_Invalid: CorsairChannelDeviceType = 0;
pub const CorsairChannelDeviceType_CCDT_HD_Fan: CorsairChannelDeviceType = 1;
pub const CorsairChannelDeviceType_CCDT_SP_Fan: CorsairChannelDeviceType = 2;
pub const CorsairChannelDeviceType_CCDT_LL_Fan: CorsairChannelDeviceType = 3;
pub const CorsairChannelDeviceType_CCDT_ML_Fan: CorsairChannelDeviceType = 4;
pub const CorsairChannelDeviceType_CCDT_QL_Fan: CorsairChannelDeviceType = 5;
pub const CorsairChannelDeviceType_CCDT_8LedSeriesFan: CorsairChannelDeviceType = 6;
pub const CorsairChannelDeviceType_CCDT_Strip: CorsairChannelDeviceType = 7;
pub const CorsairChannelDeviceType_CCDT_DAP: CorsairChannelDeviceType = 8;
pub const CorsairChannelDeviceType_CCDT_Pump: CorsairChannelDeviceType = 9;
pub const CorsairChannelDeviceType_CCDT_DRAM: CorsairChannelDeviceType = 10;
pub const CorsairChannelDeviceType_CCDT_WaterBlock: CorsairChannelDeviceType = 11;
pub const CorsairChannelDeviceType_CCDT_QX_Fan: CorsairChannelDeviceType = 12;
pub type CorsairChannelDeviceType = ::std::os::raw::c_uint;
pub const CorsairAccessLevel_CAL_Shared: CorsairAccessLevel = 0;
pub const CorsairAccessLevel_CAL_ExclusiveLightingControl: CorsairAccessLevel = 1;
pub const CorsairAccessLevel_CAL_ExclusiveKeyEventsListening: CorsairAccessLevel = 2;
pub const CorsairAccessLevel_CAL_ExclusiveLightingControlAndKeyEventsListening: CorsairAccessLevel =
    3;
pub type CorsairAccessLevel = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairVersion {
    pub major: ::std::os::raw::c_int,
    pub minor: ::std::os::raw::c_int,
    pub patch: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CorsairVersion() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairVersion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairVersion>(),
        12usize,
        concat!("Size of: ", stringify!(CorsairVersion))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairVersion>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairVersion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairVersion),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairVersion),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).patch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairVersion),
            "::",
            stringify!(patch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairSessionDetails {
    pub clientVersion: CorsairVersion,
    pub serverVersion: CorsairVersion,
    pub serverHostVersion: CorsairVersion,
}
#[test]
fn bindgen_test_layout_CorsairSessionDetails() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairSessionDetails> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairSessionDetails>(),
        36usize,
        concat!("Size of: ", stringify!(CorsairSessionDetails))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairSessionDetails>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairSessionDetails))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clientVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairSessionDetails),
            "::",
            stringify!(clientVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serverVersion) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairSessionDetails),
            "::",
            stringify!(serverVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serverHostVersion) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairSessionDetails),
            "::",
            stringify!(serverHostVersion)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairSessionStateChanged {
    pub state: CorsairSessionState,
    pub details: CorsairSessionDetails,
}
#[test]
fn bindgen_test_layout_CorsairSessionStateChanged() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairSessionStateChanged> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairSessionStateChanged>(),
        40usize,
        concat!("Size of: ", stringify!(CorsairSessionStateChanged))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairSessionStateChanged>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairSessionStateChanged))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairSessionStateChanged),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).details) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairSessionStateChanged),
            "::",
            stringify!(details)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairDeviceInfo {
    pub type_: CorsairDeviceType,
    pub id: CorsairDeviceId,
    pub serial: [::std::os::raw::c_char; 128usize],
    pub model: [::std::os::raw::c_char; 128usize],
    pub ledCount: ::std::os::raw::c_int,
    pub channelCount: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CorsairDeviceInfo() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDeviceInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDeviceInfo>(),
        396usize,
        concat!("Size of: ", stringify!(CorsairDeviceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDeviceInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairDeviceInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceInfo),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serial) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceInfo),
            "::",
            stringify!(serial)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).model) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceInfo),
            "::",
            stringify!(model)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ledCount) as usize - ptr as usize },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceInfo),
            "::",
            stringify!(ledCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelCount) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceInfo),
            "::",
            stringify!(channelCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairLedPosition {
    pub id: CorsairLedLuid,
    pub cx: f64,
    pub cy: f64,
}
#[test]
fn bindgen_test_layout_CorsairLedPosition() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairLedPosition> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairLedPosition>(),
        24usize,
        concat!("Size of: ", stringify!(CorsairLedPosition))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairLedPosition>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairLedPosition))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedPosition),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cx) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedPosition),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedPosition),
            "::",
            stringify!(cy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairDeviceFilter {
    pub deviceTypeMask: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CorsairDeviceFilter() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDeviceFilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDeviceFilter>(),
        4usize,
        concat!("Size of: ", stringify!(CorsairDeviceFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDeviceFilter>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairDeviceFilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceTypeMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceFilter),
            "::",
            stringify!(deviceTypeMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairDeviceConnectionStatusChangedEvent {
    pub deviceId: CorsairDeviceId,
    pub isConnected: bool,
}
#[test]
fn bindgen_test_layout_CorsairDeviceConnectionStatusChangedEvent() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDeviceConnectionStatusChangedEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDeviceConnectionStatusChangedEvent>(),
        129usize,
        concat!(
            "Size of: ",
            stringify!(CorsairDeviceConnectionStatusChangedEvent)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDeviceConnectionStatusChangedEvent>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(CorsairDeviceConnectionStatusChangedEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceConnectionStatusChangedEvent),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isConnected) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDeviceConnectionStatusChangedEvent),
            "::",
            stringify!(isConnected)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairKeyEvent {
    pub deviceId: CorsairDeviceId,
    pub keyId: CorsairMacroKeyId,
    pub isPressed: bool,
}
#[test]
fn bindgen_test_layout_CorsairKeyEvent() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairKeyEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairKeyEvent>(),
        136usize,
        concat!("Size of: ", stringify!(CorsairKeyEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairKeyEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairKeyEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deviceId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairKeyEvent),
            "::",
            stringify!(deviceId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyId) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairKeyEvent),
            "::",
            stringify!(keyId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPressed) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairKeyEvent),
            "::",
            stringify!(isPressed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CorsairEvent {
    pub id: CorsairEventId,
    pub __bindgen_anon_1: CorsairEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CorsairEvent__bindgen_ty_1 {
    pub deviceConnectionStatusChangedEvent: *const CorsairDeviceConnectionStatusChangedEvent,
    pub keyEvent: *const CorsairKeyEvent,
}
#[test]
fn bindgen_test_layout_CorsairEvent__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairEvent__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairEvent__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(CorsairEvent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairEvent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairEvent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).deviceConnectionStatusChangedEvent) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairEvent__bindgen_ty_1),
            "::",
            stringify!(deviceConnectionStatusChangedEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyEvent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairEvent__bindgen_ty_1),
            "::",
            stringify!(keyEvent)
        )
    );
}
#[test]
fn bindgen_test_layout_CorsairEvent() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairEvent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairEvent>(),
        16usize,
        concat!("Size of: ", stringify!(CorsairEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairEvent),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairDataType_BooleanArray {
    pub items: *mut bool,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CorsairDataType_BooleanArray() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDataType_BooleanArray> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDataType_BooleanArray>(),
        16usize,
        concat!("Size of: ", stringify!(CorsairDataType_BooleanArray))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDataType_BooleanArray>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairDataType_BooleanArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_BooleanArray),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_BooleanArray),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairDataType_Int32Array {
    pub items: *mut ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CorsairDataType_Int32Array() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDataType_Int32Array> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDataType_Int32Array>(),
        16usize,
        concat!("Size of: ", stringify!(CorsairDataType_Int32Array))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDataType_Int32Array>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairDataType_Int32Array))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_Int32Array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_Int32Array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairDataType_Float64Array {
    pub items: *mut f64,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CorsairDataType_Float64Array() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDataType_Float64Array> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDataType_Float64Array>(),
        16usize,
        concat!("Size of: ", stringify!(CorsairDataType_Float64Array))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDataType_Float64Array>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairDataType_Float64Array))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_Float64Array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_Float64Array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairDataType_StringArray {
    pub items: *mut *mut ::std::os::raw::c_char,
    pub count: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_CorsairDataType_StringArray() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDataType_StringArray> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDataType_StringArray>(),
        16usize,
        concat!("Size of: ", stringify!(CorsairDataType_StringArray))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDataType_StringArray>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairDataType_StringArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).items) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_StringArray),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataType_StringArray),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union CorsairDataValue {
    pub boolean: bool,
    pub int32: ::std::os::raw::c_int,
    pub float64: f64,
    pub string: *mut ::std::os::raw::c_char,
    pub boolean_array: CorsairDataType_BooleanArray,
    pub int32_array: CorsairDataType_Int32Array,
    pub float64_array: CorsairDataType_Float64Array,
    pub string_array: CorsairDataType_StringArray,
}
#[test]
fn bindgen_test_layout_CorsairDataValue() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairDataValue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairDataValue>(),
        16usize,
        concat!("Size of: ", stringify!(CorsairDataValue))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairDataValue>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairDataValue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolean) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(float64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boolean_array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(boolean_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int32_array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(int32_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float64_array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(float64_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string_array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairDataValue),
            "::",
            stringify!(string_array)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CorsairProperty {
    pub type_: CorsairDataType,
    pub value: CorsairDataValue,
}
#[test]
fn bindgen_test_layout_CorsairProperty() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairProperty> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairProperty>(),
        24usize,
        concat!("Size of: ", stringify!(CorsairProperty))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairProperty>(),
        8usize,
        concat!("Alignment of ", stringify!(CorsairProperty))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairProperty),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairProperty),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairLedColor {
    pub id: CorsairLedLuid,
    pub r: ::std::os::raw::c_uchar,
    pub g: ::std::os::raw::c_uchar,
    pub b: ::std::os::raw::c_uchar,
    pub a: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_CorsairLedColor() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairLedColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairLedColor>(),
        8usize,
        concat!("Size of: ", stringify!(CorsairLedColor))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairLedColor>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairLedColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedColor),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairLedColor),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CorsairKeyEventConfiguration {
    pub keyId: CorsairMacroKeyId,
    pub isIntercepted: bool,
}
#[test]
fn bindgen_test_layout_CorsairKeyEventConfiguration() {
    const UNINIT: ::std::mem::MaybeUninit<CorsairKeyEventConfiguration> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CorsairKeyEventConfiguration>(),
        8usize,
        concat!("Size of: ", stringify!(CorsairKeyEventConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<CorsairKeyEventConfiguration>(),
        4usize,
        concat!("Alignment of ", stringify!(CorsairKeyEventConfiguration))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyId) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairKeyEventConfiguration),
            "::",
            stringify!(keyId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isIntercepted) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(CorsairKeyEventConfiguration),
            "::",
            stringify!(isIntercepted)
        )
    );
}
pub type CorsairSessionStateChangedHandler = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        eventData: *const CorsairSessionStateChanged,
    ),
>;
pub type CorsairAsyncCallback = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, error: CorsairError),
>;
pub type CorsairEventHandler = ::std::option::Option<
    unsafe extern "C" fn(context: *mut ::std::os::raw::c_void, event: *const CorsairEvent),
>;
extern "C" {
    #[must_use]
    pub(crate) fn CorsairConnect(
        onStateChanged: CorsairSessionStateChangedHandler,
        context: *mut ::std::os::raw::c_void,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairGetSessionDetails(details: *mut CorsairSessionDetails) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairDisconnect() -> CorsairError;
}
extern "C" {
    #[must_use]
    pub(crate) fn CorsairGetDevices(
        filter: *const CorsairDeviceFilter,
        sizeMax: ::std::os::raw::c_int,
        devices: *mut CorsairDeviceInfo,
        size: *mut ::std::os::raw::c_int,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairGetDeviceInfo(
        deviceId: *mut ::std::os::raw::c_char,
        deviceInfo: *mut CorsairDeviceInfo,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub(crate) fn CorsairGetLedPositions(
        deviceId: *mut ::std::os::raw::c_char,
        sizeMax: ::std::os::raw::c_int,
        ledPositions: *mut CorsairLedPosition,
        size: *mut ::std::os::raw::c_int,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairSubscribeForEvents(
        onEvent: CorsairEventHandler,
        context: *mut ::std::os::raw::c_void,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairUnsubscribeFromEvents() -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairConfigureKeyEvent(
        deviceId: *mut ::std::os::raw::c_char,
        config: *const CorsairKeyEventConfiguration,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairGetDevicePropertyInfo(
        deviceId: *mut ::std::os::raw::c_char,
        propertyId: CorsairDevicePropertyId,
        index: ::std::os::raw::c_uint,
        dataType: *mut CorsairDataType,
        flags: *mut ::std::os::raw::c_uint,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairReadDeviceProperty(
        deviceId: *mut ::std::os::raw::c_char,
        propertyId: CorsairDevicePropertyId,
        index: ::std::os::raw::c_uint,
        property: *mut CorsairProperty,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairWriteDeviceProperty(
        deviceId: *mut ::std::os::raw::c_char,
        propertyId: CorsairDevicePropertyId,
        index: ::std::os::raw::c_uint,
        property: *const CorsairProperty,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairFreeProperty(property: *mut CorsairProperty) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub(crate) fn CorsairSetLedColors(
        deviceId: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        ledColors: *const CorsairLedColor,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairSetLedColorsBuffer(
        deviceId: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        ledColors: *const CorsairLedColor,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairSetLedColorsFlushBufferAsync(
        callback: CorsairAsyncCallback,
        context: *mut ::std::os::raw::c_void,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairGetLedColors(
        deviceId: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        ledColors: *mut CorsairLedColor,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairSetLayerPriority(priority: ::std::os::raw::c_uint) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairGetLedLuidForKeyName(
        deviceId: *mut ::std::os::raw::c_char,
        keyName: ::std::os::raw::c_char,
        ledId: *mut CorsairLedLuid,
    ) -> CorsairError;
}
extern "C" {
    #[must_use]
    pub fn CorsairRequestControl(
        deviceId: *mut ::std::os::raw::c_char,
        accessLevel: CorsairAccessLevel,
    ) -> CorsairError;
}
extern "C" {
    pub fn CorsairReleaseControl(deviceId: *mut ::std::os::raw::c_char) -> CorsairError;
}
